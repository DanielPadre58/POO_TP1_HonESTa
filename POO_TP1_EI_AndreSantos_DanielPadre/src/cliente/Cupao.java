package cliente;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import comercio.Produto;
import comercio.ProdutoVendido;
import comercio.Venda;
import util.Validator;

/**
 * Classe que representa um cup√£o emitido pela cadeia de lojas HonESta. Este
 * cup√£o pode ser associado a um ou mais cart√µes de fideliza√ß√£o. Cada cup√£o d√°
 * direito a um desconto (em cart√£o) na compra dos produtos que abrange.
 */
public class Cupao {
    //Identifica√ß√£o do cup√£o
    private final String id;
    //Indica para quais produtos o cup√£o se aplica
    private final String descricao;
    /*
    Indica o desconto que aplica com base no pre√ßo do produto
    Valor em d√©cimas (0-1);
    */
    private final float desconto;
    //Indica quando cup√£o come√ßa a ficar ativo
    private final LocalDate inicio;
    //Indica quando o cup√£o deixa de ficar v√°lido
    private final LocalDate validade;
    //Armazena todos os produtos abranjidos pelo cup√£o
    private List <Produto> produtos;

    public Cupao(String id, String descricao, float desconto, int inicio, int validade, List<Produto> produtos) {
        this.id = Validator.requireNonBlank(id);

        this.descricao = Validator.requireNonBlank(descricao);

        this.desconto = Validator.requireInsideRange(desconto, 0, 1);

        this.validade = LocalDate.now().plusDays(Validator.requirePositive(validade));

        this.inicio = LocalDate.now().plusDays(Validator.requirePositiveOrZero(inicio));

        this.produtos = Objects.requireNonNull(produtos);
    }

    // Getters

    public String getId() {
        return id;
    }

    public String getDescricao() {
        return descricao;
    }

    public float getDesconto() {
        return desconto;
    }

    public LocalDate getInicio(){
        return inicio;
    }

    public LocalDate getValidade() {
        return validade;
    }

    public List<Produto> getProdutos() {
        return produtos;
    }

    // Setters

    public void setProdutos(ArrayList<Produto> produtos) {
        this.produtos = Objects.requireNonNull(produtos);
    }

    //Retorna um boolean que indica se a validade do cup√£o j√° come√ßou ou n√£o
    public boolean eFuturo(){
        return inicio.isAfter(LocalDate.now());
    }

    public boolean estaValido() {
        return (LocalDate.now().isBefore(validade) || LocalDate.now().equals(validade));
    }

    public boolean estaValido(LocalDate data) {
        return (data.isBefore(validade) || data.equals(validade));
    }

    /**
     * Aplica o cup√£o de desconto a um cart√£o e a uma venda. Se a venda contiver
     * algum dos produtos abrangidos pelo cup√£o, este √© dado como tendo sido
     * aplicado. Se for aplicado deve ser removido do cart√£o.
     * 
     * @param cartao o cart√£o a ser usado na venda
     * @param venda a venda a ser processada
     * @return true se o cup√£o foi aplicado na venda
     */

    //ü§ì‚òùÔ∏è
    public boolean aplicar(Cartao cartao, Venda venda) {
        boolean aplicadoEmPeloMenosUm = false;
        for(ProdutoVendido produto : venda.getProdutosVendidos()) {
            if(abrange(produto)) {
                aplicar(cartao, produto);
                aplicadoEmPeloMenosUm = true;
            }
        }

        return aplicadoEmPeloMenosUm;
    }

    /**
     * Indica se o produto indicado √© abrangido pelo cup√£o. O produto √© abrangido
     * pelo cup√£o se fizer parte da lista dos produtos e n√£o tiver j√° sido aplicado
     * ao produto um desconto maior do que o dado pelo cup√£o.
     * 
     * @param produto o produto a testar
     * @return true, se o produto √© abrangido pela cup√£o
     */
    public boolean abrange(ProdutoVendido produto) {
        return produtos.contains(produto.getProduto()) && produto.getDescontoAplicado() < desconto;
    }

    /**
     * M√©todo auxiliar para aplicar o cup√£o a um produto.
     * 
     * @param cartao o cart√£o onde acumular o saldo
     * @param produto o produto a ser usado
     */
    private void aplicar(Cartao cartao, ProdutoVendido produto) {
        produto.setDescontoAplicado(desconto);
        cartao.acumularSaldo((long)(produto.getPreco() * desconto));
    }
}
